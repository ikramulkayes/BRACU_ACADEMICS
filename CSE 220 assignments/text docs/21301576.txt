Task 1: 
Question:
 Shift Left k Cells   
Consider an array named source. Write a method/function named shiftLeft( source, k) that shifts all the elements of the source array to the left by 'k' positions. You must execute the method by passing an array and number of cells to be shifted. After calling the method, print the array to show whether the elements have been shifted properly.
Example:
source=[10,20,30,40,50,60]
shiftLeft(source,3)
After calling shiftLeft(source,3), printing the array should give the output as: 
 [ 40, 50, 60, 0, 0, 0 ]

Ans:
#Task1
def shiftLeft(lst,k):
  lenlst = len(lst)
  for elm in range(0,len(lst)):
    if elm < (lenlst-k):
      lst[elm] = lst[elm+k]
    else:
      lst[elm] = 0
 

  
  return lst

print(shiftLeft([10,20,30,40,50,60],1))


Task 2: 
Question:

Rotate Left k cells 
 Consider an array named source. Write a method/function named rotateLeft( source, k) that rotates all the elements of the source array to the left by 'k' positions. You must execute the method by passing an array and number of cells to be shifted. After calling the method, print the array to show whether the elements have been shifted properly.
Example:
source=[10,20,30,40,50,60]
rotateLeft(source,3)
After calling rotateLeft(source,3), printing the array should give the output as: 
 [ 40, 50, 60, 10, 20, 30]

Ans:
#Task2
def rotateLeft(lst,k):
  lenlst = len(lst)
  for elm in range(0,len(lst)):
    if elm < (lenlst-k):
      temp = lst[elm]
      lst[elm] = lst[elm+k]
      
      lst[elm+k] = temp
    else:
      break
  return lst
print(rotateLeft([10,20,30,40,50,60],4))




Task 3: 
Question:
 Shift Right k Cells   
Consider an array named source. Write a method/function named shifRight( source, k) that shifts all the elements of the source array to the right by 'k' positions. You must execute the method by passing an array and number of cells to be shifted. After calling the method, print the array to show whether the elements have been shifted properly.
Example:
source=[10,20,30,40,50,60]
shiftRight(source,3)
After calling shiftRight(source,3), printing the array should give the output as: 
 [ 0,0,0,10,20,30 ]

Ans:
#Task 3
def shiftRight(lst,k):
  lenlst = len(lst)
  for belm in range(k):
    temp = lst[0]
    lst[0] = 0
    
    for elm in range(1,len(lst)):
      ftemp = lst[elm]
      lst[elm] = temp
      temp = ftemp
  return lst
print(shiftRight([10,20,30,40,50,60],4))



Task 4: 
Question:
Rotate Right k cells 
 Consider an array named source. Write a method/function named rotateRight( source, k) that rotates all the elements of the source array to the right by 'k' positions. You must execute the method by passing an array and number of cells to be shifted. After calling the method, print the array to show whether the elements have been shifted properly.
Example:
source=[10,20,30,40,50,60]
rotateRight(source,3)
After calling rotateRight(source,3), printing the array should give the output as: 
 [ 40, 50, 60, 10, 20, 30]

Ans:
#Task 4
def rotateRight(lst,k):
  lenlst = len(lst)
  for belm in range(k):
    temp = lst[-1]
    ktemp = lst[0]

    

    for elm in range(1,len(lst)):
      kktemp = lst[elm]
      lst[elm] = ktemp
      ktemp = kktemp

    lst[0] = temp
  return lst 
print(rotateRight([10,20,30,40,50,60],3))

Task 5: 
Question:
Remove an element from an array
 Consider an array named source. Write a method/function named remove( source, size, idx) that removes the element in index idx of the source array. You must execute the method by passing an array, its size and the idx( that is the index of the element to be removed). After calling the method, print the array to show whether the element of that particular index has been removed properly.
Example:
source=[10,20,30,40,50,0,0]
remove(source,5,2)
After calling remove(source,5,2) , printing the array should give the output as: 
 [ 10,20,40,50,0,0,0]

Ans:
#Task 5
def removeElm(lst,size,idx):
    if size==len(lst):
        return "Get a valid size"
    elif idx <0 or idx>size:
        return "Get a valid index"
    while idx < size:
        lst[idx] = lst[idx+1]
        idx += 1
    return lst

lst = [10,20,30,40,50,0,0]
print(removeElm(lst, 5,4))


Task 6: 
Question:
Remove all occurrences of a particular element from an array
Consider an array named source. Write a method/function named removeAll( source, size, element) that removes all the occurrences of the given element in the source array. You must execute the method by passing an array, its size and the element to be removed. After calling the method, print the array to show whether all the occurrences of the element have been removed properly.
Example:
source=[10,2,30,2,50,2,2,0,0]
removeAll(source,7,2)
After calling removeAll(source,7,2), all the occurrences of 2 must be removed. Printing the array afterwards should give the output as: 
 [ 10,30,50,0,0,0,0,0,0]

Ans:

#Task 6
def makeitvanish(lst,size,value):
    if size > len(lst):
        return "Take  the correct size"
    else:
        idx = 0
        while idx < size:
            if lst[idx] == value:
                i = idx
                while i < size:
                    lst[i] = lst[i+1]
                    i += 1
                lst[size-1] = 0
                size -= 1
            else:
                idx += 1
    return lst

source=[2,10,2,30,2,2,50,2,2,2,2,0,0]
print(makeitvanish(source,11,2))


Task 7: 
Question:
Splitting an Array
Suppose the elements of an array A containing positive integers, denote the weights in kilograms. And we have a beam balance. We want to put the weights on both pans of the balance in such a way that for some index 0 < i < A.length - 1, all values starting from A[0], A[1], upto A[ i - 1], should be on the left pan. And all values starting from A[ i ] upto A[ A.length - 1] should be on the right pan and the left and right pan should be balanced. If such an i exists, return true . Else, return false. 
Input: [1, 1, 1, 2, 1]	Output : true
Explanation: (summation of [1, 1, 1] = summation of [2,1])
Input: [2, 1, 1, 2, 1] Output: false
Input: [10, 3, 1, 2, 10]  Output: true 
Explanation: (summation of [10, 3] = summation of [1,2,10]))

Ans:

#Task 7
def splittingArray(lst):
    
    
    for belm in range(1,len(lst)):
        sum1 = 0
        sum2 = 0
        for elm in range(belm):
            
            sum1 += lst[elm]
        
        for elm in range(belm,len(lst)):
            
            sum2 += lst[elm]
        
        if sum1 == sum2:
            return True
    return False

lst = [10, 3, 1, 2, 10]
print(splittingArray(lst))

Task 8: 
Question:
Array series
Write a method that takes an integer value n as a parameter. Inside the method, you should create an array of length n squared (n*n) and fill the array with the following pattern. Return the array at the end and print it.
If,
n=2: { 0,1,   2,1 } (spaces have been added to show two distinct groups).
n=3 : { 0, 0, 1,    0, 2, 1,    3, 2, 1 } ((spaces have been added to show three distinct 
groups).
n=4 : {0, 0, 0, 1,   0, 0, 2, 1,    0, 3, 2, 1,   4, 3, 2, 1}  (spaces have been added to show four distinct groups).

Ans:
#Task 8
def arraySeries(n):
    lst = [0]*(n*n)
    count = 0
    stepcount = n-1

    for i in range(1,n+1):
        for elm in range(i):
            lst[stepcount-elm] = elm+1
        stepcount+= n
    return lst

print(arraySeries(10))

Task 9: 
Question:
Max Bunch Count
A "bunch" in an array is a consecutive chain of two or more adjacent elements of the same value. Write a method that returns the number of elements in the largest bunch found in the given array.
Input: [1, 2, 2, 3, 4, 4, 4]   Output: 3
Explanation: There are two bunches here {2,2} and {4,4,4}. The largest bunch is {4,4,4} containing 3 elements so 3 is returned.
Input: [1,1,2, 2, 1, 1,1,1] Output:4
 Explanation: There are three bunches here {1,1} and {2,2} and {1,1,1,1}. The largest bunch is {1,1,1,1} containing 4 elements so 4 is returned.

Ans:

#Task 9
def maxBunchcount(lst):
    maxcount = None
    count = None
    prev= None
    for elm in range(len(lst)):
        if prev == None and maxcount==None:
            prev = lst[elm]
            count = 1
            maxcount = 1
        elif lst[elm] == prev:
            #print(lst[elm])
            count += 1
            if count > maxcount:
                #print(lst[elm])
                #print(count)
                maxcount = count
        else:
            prev = lst[elm]
            count = 1
    return maxcount

lst = [1,1,1,1,1,1, 2, 2, 3,3,4, 4, 4, 4,3,3,3,3,3]
print(maxBunchcount(lst))


Task 10: 
Question:
Repetition
 Write a method that takes in an array as a parameter and counts the repetition of each element. That is, if an element has appeared in the array more than once, then its ‘repetition’ is its number of occurrences. The method returns true if there are at least two elements with the same number of ‘repetition’. Otherwise, return false.
Input: {4,5,6,6,4,3,6,4} Output: True
Explanation: Two numbers repeat in this array: 4 and 6. 4 has a repetition of 3, 6 has a repetition of 3. Since two numbers have the same repetition output is True.
Input: {3,4,6,3,4,7,4,6,8,6,6} Output: False
Explanation: Three numbers repeat in this array:3,4 and 6 .3 has a repetition of 2, 4 has a repetition of 3, 6 has a repetition of 4. Since no two numbers have the same repetition output is False.

Ans:
#Task 10
def doubleRepeat(lst):
    rlst = [None]*len(lst)
    rlstcount = 0
    countlst = [None]*len(lst)
    countlstcount = 0
    #flag = True
    for elm in lst:
        flag=True
        if len(rlst)==0:
            rlst[0] = elm
            rlstcount+= 1
        else:
            for selm in rlst:
                if selm == elm:
                    flag = False
                    pass
            if flag == True:
                rlst[rlstcount] = elm
                rlstcount+=1
        if flag:
            count = 0
            for kelm in lst:
                if elm == kelm:
                    count+= 1
            
            countlst[countlstcount] = count
            countlstcount +=1
    #print(rlst)
    #print(countlst)
    checklst = [0]*len(lst)
    count = 0
    for elm in countlst:
        for selm in checklst:
            if elm != None:
                if elm >1 and elm==selm:
                    #print(elm)
                    return True
        checklst[count] = elm
        count+= 1
    return False

lst = [3,4,6,3,4,7,4,6,8,6,6,4]
print(doubleRepeat(lst))

